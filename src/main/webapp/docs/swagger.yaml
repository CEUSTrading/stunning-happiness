---
swagger: "2.0"
info:
  description: This the api for the CEUS project, made for AISS.
  version: 1.2.0
  title: CEUS API
  contact:
    email: contact.ceus@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: cryptoeus.appspot.com
basePath: /api
tags:
- name: Places
  description: Calls to interact with the places where you can use BTC
- name: Blockchain
  description: Calls to get information about the Blockchain
schemes:
- https
paths:
  /blockchain/balance/{address}:
    get:
      tags:
      - Blockchain
      summary: returns the total balance of the address (on BTC)
      description: When you pass an address, either from the main or the test net, this call returns the current total amount of BTC  that address in BTC.
      operationId: getAddressBalance
      produces:
      - text/plain
      parameters:
      - name: address
        in: path
        description: The address you want to know the balance of, on base58.
        required: true
        type: string
      responses:
        200:
          description: OK, balance of the address
          schema:
            $ref: '#/definitions/balance'
        400:
          description: bad request
  /blockchain/detailed-balance/{address}:
    get:
      tags:
      - Blockchain
      summary: returns a detailed balance of the address (in BTC)
      description: When you pass an address, this method returns a detailed balance of the address, incluiding the total amount of Satoshi received and spent, plus the final balance. To convert from Satoshi to BTC, divide by 10^8.
      operationId: getDetailedAddressBalance
      produces:
      - application/json
      parameters:
      - name: address
        in: path
        description: The address you want to know the balance of, on base58.
        required: true
        type: string
      responses:
        200:
          description: OK, balance of the address
          schema:
            $ref: '#/definitions/detailed-balance'
        400:
          description: bad request
  /blockchain/prices/{currency}:
    get:
      tags:
      - Blockchain
      summary: returns the price of 1BTC
      description: When you pass a fiat currency symbol (EUR, USD, GBP, JPY, KRW), it returns the current price of 1BTC in the specified currency.
      operationId: getPrice
      produces:
      - application/json
      parameters:
      - name: currency
        in: path
        description: The fiat currency symbol IN UPPERCASE.
        required: true
        type: string
      responses:
        200:
          description: OK, price
          schema:
            $ref: '#/definitions/prices'
        400:
          description: bad request
        404:
          description: the query was valid but the specified currency isn't
  /blockchain/convert:
    get:
      tags:
      - Blockchain
      summary: converts the specified amount to BTC
      description: This method converts the specified amount of an specified currency (EUR, JPY, USD, KRW or GBP) to BTC.
      operationId: getConverted
      produces:
      - text/plain
      parameters:
      - name: cur
        in: query
        description: The fiat currency symbol IN UPPERCASE.
        required: true
        type: string
      - name: val
        in: query
        description: The amount to convert
        required: true
        type: number
      responses:
        200:
          description: OK, amount converted
          schema:
            $ref: '#/definitions/convert'
        400:
          description: bad request
  /blockchain/historical:
    get:
      tags:
      - Blockchain
      summary: returns the historical value of a BTC in USD
      description: This method returns the historical value of the number of days specified, or of 30 days if not specified
      operationId: getHistorical
      produces:
      - application/json
      parameters:
      - name: days
        in: query
        description: The number of days you want to get
        required: false
        type: number
      responses:
        200:
          description: OK, historical data
          schema:
            $ref: '#/definitions/historical'
        400:
          description: bad request
  /places:
    get:
      tags:
      - Places
      summary: returns all the places (on the database) where you can use BTC
      description: Calling this method will return all the places registered on our database. If you specify a city, it will return all the places inside the specified city.
      operationId: getPlaces
      produces:
      - application/json
      parameters:
      - name: city
        in: query
        description: The name of the city you want to know the places from.
        required: false
        type: string
      responses:
        200:
          description: OK, places
          schema:
            type: array
            items:
              $ref: '#/definitions/get-places'
        400:
          description: bad request
        404:
          description: not found
    post:
      tags:
      - Places
      summary: adds a new place to our database.
      description: This method lets you add a new Place to our databse.
      operationId: addPlace
      consumes:
      - application/json
      parameters:
      - in: body
        name: place
        description: The place you want to add, on json and without the id, as it is supplied by our server.
        required: true
        schema:
          $ref: '#/definitions/post-places'
      responses:
        201:
          description: OK, place created
        400:
          description: bad request
    put:
      tags:
      - Places
      summary: updates a place on our database.
      description: This method lets you update a Place that is in our database.
      operationId: updatePlace
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: place
        description: The place you want to update, updated.
        required: true
        schema:
          $ref: '#/definitions/get-places'
      responses:
        200:
          description: OK, place updated
        400:
          description: bad request
        404:
          description: place not found
  /places/{id}:
    get:
      tags:
      - Places
      summary: gets the Place with the specified id
      description: This method returns only the place with the specified id.
      operationId: getById
      parameters:
      - name: id
        in: path
        description: The id of the place you want to consult.
        required: true
        type: string
      responses:
        200:
          description: OK, place
          schema:
            $ref: '#/definitions/get-places'
    delete:
      tags:
      - Places
      summary: deletes a place from our database.
      description: This method lets you delete a Place that is on our database.
      operationId: deletePlace
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: The id of the place you want to delete.
        required: true
        type: string
      responses:
        200:
          description: OK, place deleted
        400:
          description: bad request
        404:
          description: place not found
definitions:
  balance:
    type: object
    required:
    - finalBalance
    properties:
      finalBalance:
        type: number
        example: 8.25E7
  detailed-balance:
    type: object
    required:
    - address
    - finalBalance
    - hash160
    - nTx
    - totalReceived
    - totalSent
    properties:
      hash160:
        type: string
        example: 0ff375cdffa5af09812ac0f42101ea269edb88c5
      address:
        type: string
        format: base58
        example: mgyJ5qjF5N7hhvW7aQV9cb3Jt3HpH4B9V1
      totalReceived:
        type: number
        example: 0.825
      totalSent:
        type: number
        example: 0.0
      finalBalance:
        type: number
        example: 0.825
      nTx:
        type: number
        example: 2.0
    example:
      address: mgyJ5qjF5N7hhvW7aQV9cb3Jt3HpH4B9V1
      nTx: 2.0
      finalBalance: 0.825
      totalReceived: 0.825
      totalSent: 0.0
      hash160: 0ff375cdffa5af09812ac0f42101ea269edb88c5
  prices:
    type: object
    required:
    - 15m
    - buy
    - last
    - sell
    - symbol
    properties:
      last:
        type: number
        example: 8193.22
      buy:
        type: number
        example: 8193.22
      sell:
        type: number
        example: 8193.22
      symbol:
        type: string
        example: $
      15m:
        type: number
        example: 8193.22
    example:
      symbol: $
      last: 8193.22
      buy: 8193.22
      sell: 8193.22
      15m: 8193.22
  convert:
    type: string
    example: "1.43713883"
  historical:
    type: object
    required:
    - name
    - period
    - status
    - unit
    - values
    properties:
      status:
        type: string
        example: ok
      name:
        type: string
        example: Market Price (USD)
      unit:
        type: string
        example: USD
      period:
        type: string
        example: days
      descriptions:
        type: string
        example: Average USD market price across major bitcoin exchanges.
      values:
        $ref: '#/definitions/values-historical'
    example:
      unit: USD
      period: days
      values:
        cero:
          x: 1.526256E9
          y: 8652.038333333332
      name: Market Price (USD)
      descriptions: Average USD market price across major bitcoin exchanges.
      status: ok
  values-historical:
    type: object
    properties:
      cero:
        $ref: '#/definitions/cero-historical'
    example:
      cero:
        x: 1.526256E9
        y: 8652.038333333332
  cero-historical:
    type: object
    required:
    - x
    - y
    properties:
      x:
        type: number
        example: 1.526256E9
      y:
        type: number
        example: 8652.038333333332
    example:
      x: 1.526256E9
      y: 8652.038333333332
  get-places:
    type: object
    required:
    - category
    - city
    - email
    - facebook
    - id
    - lat
    - lon
    - name
    - twitter
    properties:
      id:
        type: string
        example: l0
      name:
        type: string
        example: CryptOle
      lat:
        type: number
        example: 37.350581
      lon:
        type: number
        example: -5.985418
      city:
        type: string
        example: Sevilla
      category:
        type: string
        example: atm
      twitter:
        type: string
        example: cryptole
      facebook:
        type: string
        example: CryptOle
      email:
        type: string
        example: cryptole@gmail.com
    example:
      twitter: cryptole
      city: Sevilla
      facebook: CryptOle
      name: CryptOle
      lon: -5.985418
      id: l0
      category: atm
      lat: 37.350581
      email: cryptole@gmail.com
  post-places:
    type: object
    required:
    - category
    - city
    - email
    - facebook
    - lat
    - lon
    - name
    - twitter
    properties:
      name:
        type: string
        example: CryptOle
      lat:
        type: number
        example: 37.350581
      lon:
        type: number
        example: -5.985418
      city:
        type: string
        example: Sevilla
      category:
        type: string
        example: atm
      twitter:
        type: string
        example: cryptole
      facebook:
        type: string
        example: CryptOle
      email:
        type: string
        example: cryptole@gmail.com
